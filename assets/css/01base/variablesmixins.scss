/*
==========================================================================
SASS VARIABLES, MIXINS, PLACEHOLDERS
========================================================================== */

/*
Colours */
$offwhite: #FFFFFA;
$greyBlue: #334D5C;
$greyLight: #70828A;
$greyFaded: #C3C9CD;
$teal: #23A38F;
$tealLight: #7BC8B9;
$green: #B7C11E;
$greenLight: #D4DA74;
$yellow: #F6CB51;
$orange: #E27A3F;

/*
Font families */
@font-face {
  font-family: 'latolight';
  src: url('../fonts/lato-light-webfont.eot');
  src: url('../fonts/lato-light-webfont.eot?#iefix') format('embedded-opentype'),
       url('../fonts/lato-light-webfont.svg#latolight') format('svg'),
       url('../fonts/lato-light-webfont.ttf') format('truetype');
  font-weight: normal;
  font-style: normal;
}
@font-face {
  font-family: 'latolight_italic';
  src: url('../fonts/lato-lightitalic-webfont.eot');
  src: url('../fonts/lato-lightitalic-webfont.eot?#iefix') format('embedded-opentype'),
       url('../fonts/lato-lightitalic-webfont.svg#latolight_italic') format('svg'),
       url('../fonts/lato-lightitalic-webfont.ttf') format('truetype');
  font-weight: normal;
  font-style: normal;
}
@font-face {
  font-family: 'lato_regular';
  src: url('../fonts/lato-regular-webfont.eot');
  src: url('../fonts/lato-regular-webfont.eot?#iefix') format('embedded-opentype'),
       url('../fonts/lato-regular-webfont.svg#lato_regular') format('svg'),
       url('../fonts/lato-regular-webfont.ttf') format('truetype');
  font-weight: normal;
  font-style: normal;
}
@font-face {
  font-family: 'lato_italic';
  src: url('../fonts/lato-italic-webfont.eot');
  src: url('../fonts/lato-italic-webfont.eot?#iefix') format('embedded-opentype'),
       url('../fonts/lato-italic-webfont.svg#lato_italic') format('svg'),
       url('../fonts/lato-italic-webfont.ttf') format('truetype');
  font-weight: normal;
  font-style: normal;
}
$font: 'latolight', 'HelveticaLight', 'Helvetica-Light', 'Helvetica Light', Helvetica, Arial, sans-serif;
$fontItalic: 'latolight_italic', 'HelveticaNeueLightItalic', 'HelveticaNeue-Light-Italic', 'Helvetica Neue Light Italic', 'Arial Italic', sans-serif;
$fontBold: 'lato_regular', 'HelveticaNeue', 'Helvetica Neue', 'Arial', sans-serif;
$fontBoldItalic: 'lato_italic', 'HelveticaNeueItalic', 'HelveticaNeue-Italic', 'Helvetica Neue Italic', 'Arial', sans-serif;


/*
REM mixin
Adapted from https://github.com/bitmanic/rem/blob/master/stylesheets/_rem.scss
rem(font-size, 28px) will return:
font-size: 28px;
font-size: 1.75rem; */
$basesize-px: 16px;
@mixin rem($property, $values) {
  // Create empty lists that we can dump values into
  $px-values: ();
  $rem-values: ();
  // Loop through each value and put into px and rem lists
  @each $value in $values {
    // if value is 0 or not a numerical value (i.e. auto), return as is
    @if $value == 0 or type-of( $value ) != "number" {
      $px-values: append($px-values, $value);
      $rem-values: append($rem-values, $value);
    } @else {
      $px-values: append($px-values, $value );
      $rem-values: append($rem-values, ($value/$basesize-px) * 1rem );
    }
  }
  // Return the property and its list of converted values
  #{$property}: $px-values;
  #{$property}: $rem-values;
}

/*
Media query mixin
Adapted from http://blog.grayghostvisuals.com/sass/sass-media-query-mixin/
Examples:
@include media-query(min, 704px) {}
@include media-query(max, 704px) {}
@include media-query(min-max, 360px, 859px) {} */
@mixin media-query($constraint, $breakpoint1, $breakpoint2: null) {
  @if $constraint == "min" {
    $emBreakpoint: ($breakpoint1 / 16px) * 1em ;
    @media only screen and (min-width: $emBreakpoint) {
      @content;
    }
  } @else if $constraint == "max" {
    $emBreakpoint: ($breakpoint1 / 16px) * 1em ;
    @media only screen and (max-width: $emBreakpoint) {
      @content;
    }
  } @else if $constraint == "min-max" {
    $emBreakpoint1: ($breakpoint1 / 16px) * 1em ;
    $emBreakpoint2: ($breakpoint2 / 16px) * 1em ;
    @media only screen and (min-width: $emBreakpoint1) and (max-width: $emBreakpoint2) {
      @content;
    }
  }
}

/*
Breakpoints (converted to ems with media query mixin) */
$breakpointMini: 319px;
$breakpointSmall: 480px;
$breakpointMedium: 700px;
$breakpointLarge: 960px;

/*
Reverse visuallyhidden mixin
reverses the .visuallyhidden helper class properties */
@mixin reverse-visuallyhidden {
  position: static;
  overflow: auto;
  width: auto;
  height: auto;
  margin: 0;
  clip: auto;
}

/*
Hover states mixin */
@mixin hover-states {
  &:hover, &:focus, &:active {
    @content;
  }
}

/*
Clearfix Placeholder */
%clearfix {
  *zoom: 1;
  &:after {
      content: " ";
      display: table;
      clear: both;
  }
}

/*
Short line */
@mixin short-line($position) {
  content: '';
  display: block;
  width: 32px;
  border-top: 2px solid;
  margin: 0 auto;
  @if $position == "before" {
    @include rem(margin-bottom, 16px);
  } @else if $position == "after" {
    @include rem(margin-top, 18px);
  }
}
